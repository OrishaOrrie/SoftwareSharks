{"version":3,"sources":["../../src/core/Core.js"],"names":["Utils","require","Translator","ee","cuid","throttle","prettyBytes","match","DefaultStore","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","defaultOptions","id","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","onBeforeFileAdded","currentFile","files","resolve","onBeforeUpload","locale","store","translator","i18n","translate","bind","plugins","getState","getPlugin","setFileMeta","setFileState","log","info","hideInfo","addFile","removeFile","pauseResume","_calculateProgress","updateOnlineStatus","resetProgress","pauseAll","resumeAll","retryAll","cancelAll","retryUpload","upload","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","setState","currentUploads","capabilities","resumableUploads","totalProgress","isHidden","type","message","_storeUnsubscribe","subscribe","prevState","nextState","patch","updateAll","global","uppyLog","event","callback","state","iteratePlugins","plugin","update","fileID","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","Object","keys","forEach","updatedFile","progress","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","updatedMeta","newMeta","getFile","_checkMinNumberOfFiles","length","Error","smart_count","_checkRestrictions","file","isCorrectFileType","filter","allowedFileTypesString","join","size","then","getFileType","fileType","fileName","name","split","fileExtension","getFileNameAndExtension","extension","isRemote","generateFileID","newFile","source","bytesTotal","remote","preview","scheduledAutoProceed","setTimeout","catch","err","console","error","stack","reject","removedFile","updatedUploads","removeUploads","uploadID","newFileIDs","fileIDs","uploadFileID","_removeUpload","_calculateTotalProgress","isObjectURL","URL","revokeObjectURL","wasPaused","isPaused","inProgressUpdatedFiles","filesToRetry","_createUpload","_runUpload","uploadIDs","reset","Math","floor","toFixed","inProgress","progressMax","progressAll","actions","details","Date","now","_throttledCalculateProgress","leading","trailing","uploadResp","uploadURL","preprocess","postprocess","window","addEventListener","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","install","foundPlugin","pluginName","method","pluginType","removePlugin","instance","list","uninstall","index","close","duration","isComplexMessage","clearTimeout","infoTimeoutID","undefined","newInfo","getTimeStamp","warn","dir","run","restore","step","result","_getUpload","addResultData","currentUpload","uploadData","restoreStep","steps","lastStep","map","successful","failed","uploader","currentlyUploadingFiles","reduce","prev","curr","concat","waitingFileIDs","module","exports"],"mappings":"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","file":"Core.js","sourcesContent":["const Utils = require('../core/Utils')\nconst Translator = require('../core/Translator')\nconst ee = require('namespace-emitter')\nconst cuid = require('cuid')\nconst throttle = require('lodash.throttle')\nconst prettyBytes = require('prettier-bytes')\nconst match = require('mime-match')\nconst DefaultStore = require('../store/DefaultStore')\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n *\n * @param {object} opts — Uppy options\n */\nclass Uppy {\n  constructor (opts) {\n    const defaultLocale = {\n      strings: {\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: 'This file exceeds maximum allowed size of',\n        youCanOnlyUploadFileTypes: 'You can only upload:',\n        uppyServerError: 'Connection with Uppy Server failed'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: false,\n        maxNumberOfFiles: false,\n        minNumberOfFiles: false,\n        allowedFileTypes: false\n      },\n      meta: {},\n      onBeforeFileAdded: (currentFile, files) => Promise.resolve(),\n      onBeforeUpload: (files) => Promise.resolve(),\n      locale: defaultLocale,\n      store: new DefaultStore()\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.opts.restrictions = Object.assign({}, defaultOptions.restrictions, this.opts.restrictions)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    // Container for different types of plugins\n    this.plugins = {}\n\n    this.getState = this.getState.bind(this)\n    this.getPlugin = this.getPlugin.bind(this)\n    this.setFileMeta = this.setFileMeta.bind(this)\n    this.setFileState = this.setFileState.bind(this)\n    this.log = this.log.bind(this)\n    this.info = this.info.bind(this)\n    this.hideInfo = this.hideInfo.bind(this)\n    this.addFile = this.addFile.bind(this)\n    this.removeFile = this.removeFile.bind(this)\n    this.pauseResume = this.pauseResume.bind(this)\n    this._calculateProgress = this._calculateProgress.bind(this)\n    this.updateOnlineStatus = this.updateOnlineStatus.bind(this)\n    this.resetProgress = this.resetProgress.bind(this)\n\n    this.pauseAll = this.pauseAll.bind(this)\n    this.resumeAll = this.resumeAll.bind(this)\n    this.retryAll = this.retryAll.bind(this)\n    this.cancelAll = this.cancelAll.bind(this)\n    this.retryUpload = this.retryUpload.bind(this)\n    this.upload = this.upload.bind(this)\n\n    this.emitter = ee()\n    this.on = this.on.bind(this)\n    this.off = this.off.bind(this)\n    this.once = this.emitter.once.bind(this.emitter)\n    this.emit = this.emitter.emit.bind(this.emitter)\n\n    this.preProcessors = []\n    this.uploaders = []\n    this.postProcessors = []\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: Object.assign({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: 'info',\n        message: ''\n      }\n    })\n\n    this._storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // for debugging and testing\n    // this.updateNum = 0\n    if (this.opts.debug) {\n      global.uppyLog = ''\n      global[this.opts.id] = this\n    }\n  }\n\n  on (event, callback) {\n    this.emitter.on(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state\n   *\n   * @param {patch} object\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  /**\n  * Back compat for when this.state is used instead of this.getState().\n  */\n  get state () {\n    return this.getState()\n  }\n\n  /**\n  * Shorthand to set state for a specific file.\n  */\n  setFileState (fileID, state) {\n    this.setState({\n      files: Object.assign({}, this.getState().files, {\n        [fileID]: Object.assign({}, this.getState().files[fileID], state)\n      })\n    })\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: false\n    }\n    const files = Object.assign({}, this.getState().files)\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = Object.assign({}, files[fileID])\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    })\n\n    // TODO Document on the website\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.preProcessors.push(fn)\n  }\n\n  removePreProcessor (fn) {\n    const i = this.preProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1)\n    }\n  }\n\n  addPostProcessor (fn) {\n    this.postProcessors.push(fn)\n  }\n\n  removePostProcessor (fn) {\n    const i = this.postProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1)\n    }\n  }\n\n  addUploader (fn) {\n    this.uploaders.push(fn)\n  }\n\n  removeUploader (fn) {\n    const i = this.uploaders.indexOf(fn)\n    if (i !== -1) {\n      this.uploaders.splice(i, 1)\n    }\n  }\n\n  setMeta (data) {\n    const updatedMeta = Object.assign({}, this.getState().meta, data)\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n        meta: Object.assign({}, updatedFiles[fileID].meta, data)\n      })\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that’s not with us anymore: ', fileID)\n      return\n    }\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n      meta: newMeta\n    })\n    this.setState({files: updatedFiles})\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n  * Check if minNumberOfFiles restriction is reached before uploading.\n  *\n  * @return {boolean}\n  * @private\n  */\n  _checkMinNumberOfFiles () {\n    const {minNumberOfFiles} = this.opts.restrictions\n    if (Object.keys(this.getState().files).length < minNumberOfFiles) {\n      throw new Error(`${this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles })}`)\n    }\n  }\n\n  /**\n  * Check if file passes a set of restrictions set in options: maxFileSize,\n  * maxNumberOfFiles and allowedFileTypes.\n  *\n  * @param {object} file object to check\n  * @private\n  */\n  _checkRestrictions (file) {\n    const {maxFileSize, maxNumberOfFiles, allowedFileTypes} = this.opts.restrictions\n\n    if (maxNumberOfFiles) {\n      if (Object.keys(this.getState().files).length + 1 > maxNumberOfFiles) {\n        throw new Error(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.filter((type) => {\n        if (!file.type) return false\n        return match(file.type, type)\n      }).length > 0\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        throw new Error(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`)\n      }\n    }\n\n    if (maxFileSize) {\n      if (file.data.size > maxFileSize) {\n        throw new Error(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`)\n      }\n    }\n  }\n\n  /**\n  * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n  * try to guess file type in a clever way, check file against restrictions,\n  * and start an upload if `autoProceed === true`.\n  *\n  * @param {object} file object to add\n  */\n  addFile (file) {\n    return Promise.resolve()\n      // Wrap this in a Promise `.then()` handler so errors will reject the Promise\n      // instead of throwing.\n      .then(() => this.opts.onBeforeFileAdded(file, this.getState().files))\n      .then(() => Utils.getFileType(file))\n      .then((fileType) => {\n        const updatedFiles = Object.assign({}, this.getState().files)\n        let fileName\n        if (file.name) {\n          fileName = file.name\n        } else if (fileType.split('/')[0] === 'image') {\n          fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1]\n        } else {\n          fileName = 'noname'\n        }\n        const fileExtension = Utils.getFileNameAndExtension(fileName).extension\n        const isRemote = file.isRemote || false\n\n        const fileID = Utils.generateFileID(file)\n\n        const newFile = {\n          source: file.source || '',\n          id: fileID,\n          name: fileName,\n          extension: fileExtension || '',\n          meta: Object.assign({}, this.getState().meta, {\n            name: fileName,\n            type: fileType\n          }),\n          type: fileType,\n          data: file.data,\n          progress: {\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.data.size || 0,\n            uploadComplete: false,\n            uploadStarted: false\n          },\n          size: file.data.size || 0,\n          isRemote: isRemote,\n          remote: file.remote || '',\n          preview: file.preview\n        }\n\n        this._checkRestrictions(newFile)\n\n        updatedFiles[fileID] = newFile\n        this.setState({files: updatedFiles})\n\n        this.emit('file-added', newFile)\n        this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\n\n        if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n          this.scheduledAutoProceed = setTimeout(() => {\n            this.scheduledAutoProceed = null\n            this.upload().catch((err) => {\n              console.error(err.stack || err.message || err)\n            })\n          }, 4)\n        }\n      })\n      .catch((err) => {\n        const message = typeof err === 'object' ? err.message : err\n        this.log(message)\n        this.info(message, 'error', 5000)\n        return Promise.reject(typeof err === 'object' ? err : new Error(err))\n      })\n  }\n\n  removeFile (fileID) {\n    const { files, currentUploads } = this.state\n    const updatedFiles = Object.assign({}, files)\n    const removedFile = updatedFiles[fileID]\n    delete updatedFiles[fileID]\n\n    // Remove this file from its `currentUpload`.\n    const updatedUploads = Object.assign({}, currentUploads)\n    const removeUploads = []\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter((uploadFileID) => uploadFileID !== fileID)\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        removeUploads.push(uploadID)\n        return\n      }\n\n      updatedUploads[uploadID] = Object.assign({}, currentUploads[uploadID], {\n        fileIDs: newFileIDs\n      })\n    })\n\n    this.setState({\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    })\n\n    removeUploads.forEach((uploadID) => {\n      this._removeUpload(uploadID)\n    })\n\n    this._calculateTotalProgress()\n    this.emit('file-removed', removedFile)\n    this.log(`File removed: ${removedFile.id}`)\n\n    // Clean up object URLs.\n    if (removedFile.preview && Utils.isObjectURL(removedFile.preview)) {\n      URL.revokeObjectURL(removedFile.preview)\n    }\n\n    this.log(`Removed file: ${fileID}`)\n  }\n\n  pauseResume (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    if (updatedFiles[fileID].uploadComplete) return\n\n    const wasPaused = updatedFiles[fileID].isPaused || false\n    const isPaused = !wasPaused\n\n    const updatedFile = Object.assign({}, updatedFiles[fileID], {\n      isPaused: isPaused\n    })\n\n    updatedFiles[fileID] = updatedFile\n    this.setState({files: updatedFiles})\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: true\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    const uploadID = this._createUpload(filesToRetry)\n    return this._runUpload(uploadID)\n  }\n\n  cancelAll () {\n    this.emit('cancel-all')\n\n    // TODO Or should we just call removeFile on all files?\n    const { currentUploads } = this.getState()\n    const uploadIDs = Object.keys(currentUploads)\n\n    uploadIDs.forEach((id) => {\n      this._removeUpload(id)\n    })\n\n    this.setState({\n      files: {},\n      totalProgress: 0\n    })\n  }\n\n  retryUpload (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      { error: null, isPaused: false }\n    )\n    updatedFiles[fileID] = updatedFile\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this._createUpload([ fileID ])\n    return this._runUpload(uploadID)\n  }\n\n  reset () {\n    this.cancelAll()\n  }\n\n  _calculateProgress (file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n      return\n    }\n\n    this.setFileState(file.id, {\n      progress: Object.assign({}, this.getFile(file.id).progress, {\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\n      })\n    })\n\n    this._calculateTotalProgress()\n  }\n\n  _calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = Object.assign({}, this.getState().files)\n\n    const inProgress = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const progressMax = inProgress.length * 100\n    let progressAll = 0\n    inProgress.forEach((file) => {\n      progressAll = progressAll + files[file].progress.percentage\n    })\n\n    const totalProgress = progressMax === 0 ? 0 : Math.floor((progressAll * 100 / progressMax).toFixed(2))\n\n    this.setState({\n      totalProgress: totalProgress\n    })\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   *\n   */\n  actions () {\n    // const log = this.log\n    // this.on('*', function (payload) {\n    //   log(`[Core] Event: ${this.event}`)\n    //   log(payload)\n    // })\n\n    // stress-test re-rendering\n    // setInterval(() => {\n    //   this.setState({bla: 'bla'})\n    // }, 20)\n\n    this.on('error', (error) => {\n      this.setState({ error: error.message })\n    })\n\n    this.on('upload-error', (file, error) => {\n      this.setFileState(file.id, { error: error.message })\n      this.setState({ error: error.message })\n\n      let message = `Failed to upload ${file.name}`\n      if (typeof error === 'object' && error.message) {\n        message = { message: message, details: error.message }\n      }\n      this.info(message, 'error', 5000)\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('upload-started', (file, upload) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getFile(file.id), {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size\n        })\n      })\n    })\n\n    // upload progress events can occur frequently, especially when you have a good\n    // connection to the remote server. Therefore, we are throtteling them to\n    // prevent accessive function calls.\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\n    const _throttledCalculateProgress = throttle(this._calculateProgress, 100, { leading: true, trailing: true })\n\n    this.on('upload-progress', _throttledCalculateProgress)\n\n    this.on('upload-success', (file, uploadResp, uploadURL) => {\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getFile(file.id).progress, {\n          uploadComplete: true,\n          percentage: 100\n        }),\n        uploadURL: uploadURL,\n        isPaused: false\n      })\n\n      this._calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getFile(file.id).progress, {\n          preprocess: progress\n        })\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = Object.assign({}, this.getState().files)\n      files[file.id] = Object.assign({}, files[file.id], {\n        progress: Object.assign({}, files[file.id].progress)\n      })\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files: files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getState().files[file.id].progress, {\n          postprocess: progress\n        })\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = Object.assign({}, this.getState().files)\n      files[file.id] = Object.assign({}, files[file.id], {\n        progress: Object.assign({}, files[file.id].progress)\n      })\n      delete files[file.id].progress.postprocess\n      // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is upload…fully complete…rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      this.setState({ files: files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this._calculateTotalProgress()\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.updateOnlineStatus())\n      window.addEventListener('offline', () => this.updateOnlineStatus())\n      setTimeout(() => this.updateOnlineStatus(), 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online =\n      typeof window.navigator.onLine !== 'undefined'\n        ? window.navigator.onLine\n        : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info('No internet connection', 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info('Connected!', 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {Class} Plugin object\n   * @param {Object} options object that will be passed to Plugin later\n   * @return {Object} self for chaining\n   */\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      let msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    let existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      let msg = `Already found a plugin named '${existsPluginAlready.id}'.\n        Tried to use: '${pluginId}'.\n        Uppy is currently limited to running one of every plugin.\n        Share your use case with us over at\n        https://github.com/transloadit/uppy/issues/\n        if you want us to reconsider.`\n      throw new Error(msg)\n    }\n\n    this.plugins[plugin.type].push(plugin)\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param string name description\n   */\n  getPlugin (name) {\n    let foundPlugin = false\n    this.iteratePlugins((plugin) => {\n      const pluginName = plugin.id\n      if (pluginName === name) {\n        foundPlugin = plugin\n        return false\n      }\n    })\n    return foundPlugin\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param function method description\n   */\n  iteratePlugins (method) {\n    Object.keys(this.plugins).forEach(pluginType => {\n      this.plugins[pluginType].forEach(method)\n    })\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {Plugin} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    const list = this.plugins[instance.type]\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const index = list.indexOf(instance)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.reset()\n\n    this._storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      plugin.uninstall()\n    })\n  }\n\n  /**\n  * Set info message in `state.info`, so that UI plugins like `Informer`\n  * can display the message.\n  *\n  * @param {string} msg Message to be displayed by the informer\n  */\n\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }\n    })\n\n    this.emit('info-visible')\n\n    window.clearTimeout(this.infoTimeoutID)\n    if (duration === 0) {\n      this.infoTimeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration)\n  }\n\n  hideInfo () {\n    const newInfo = Object.assign({}, this.getState().info, {\n      isHidden: true\n    })\n    this.setState({\n      info: newInfo\n    })\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\n   *\n   * @param {String|Object} msg to log\n   * @param {String} type optional `error` or `warning`\n   */\n  log (msg, type) {\n    if (!this.opts.debug) {\n      return\n    }\n\n    let message = `[Uppy] [${Utils.getTimeStamp()}] ${msg}`\n\n    global.uppyLog = global.uppyLog + '\\n' + 'DEBUG LOG: ' + msg\n\n    if (type === 'error') {\n      console.error(message)\n      return\n    }\n\n    if (type === 'warning') {\n      console.warn(message)\n      return\n    }\n\n    if (msg === `${msg}`) {\n      console.log(message)\n    } else {\n      message = `[Uppy] [${Utils.getTimeStamp()}]`\n      console.log(message)\n      console.dir(msg)\n    }\n  }\n\n  /**\n   * Initializes actions.\n   *\n   */\n  run () {\n    this.log('Core is run, initializing actions...')\n    this.actions()\n\n    return this\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this._removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this._runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @return {string} ID of this upload.\n   */\n  _createUpload (fileIDs) {\n    const uploadID = cuid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    })\n\n    this.setState({\n      currentUploads: Object.assign({}, this.getState().currentUploads, {\n        [uploadID]: {\n          fileIDs: fileIDs,\n          step: 0,\n          result: {}\n        }\n      })\n    })\n\n    return uploadID\n  }\n\n  _getUpload (uploadID) {\n    return this.getState().currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this._getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const currentUploads = this.getState().currentUploads\n    const currentUpload = Object.assign({}, currentUploads[uploadID], {\n      result: Object.assign({}, currentUploads[uploadID].result, data)\n    })\n    this.setState({\n      currentUploads: Object.assign({}, currentUploads, {\n        [uploadID]: currentUpload\n      })\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  _removeUpload (uploadID) {\n    const currentUploads = Object.assign({}, this.getState().currentUploads)\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads: currentUploads\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  _runUpload (uploadID) {\n    const uploadData = this.getState().currentUploads[uploadID]\n    const fileIDs = uploadData.fileIDs\n    const restoreStep = uploadData.step\n\n    const steps = [\n      ...this.preProcessors,\n      ...this.uploaders,\n      ...this.postProcessors\n    ]\n    let lastStep = Promise.resolve()\n    steps.forEach((fn, step) => {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return\n      }\n\n      lastStep = lastStep.then(() => {\n        const { currentUploads } = this.getState()\n        const currentUpload = Object.assign({}, currentUploads[uploadID], {\n          step: step\n        })\n        this.setState({\n          currentUploads: Object.assign({}, currentUploads, {\n            [uploadID]: currentUpload\n          })\n        })\n        // TODO give this the `currentUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        return fn(fileIDs, uploadID)\n      }).then((result) => {\n        return null\n      })\n    })\n\n    // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n    lastStep.catch((err) => {\n      this.emit('error', err)\n\n      this._removeUpload(uploadID)\n    })\n\n    return lastStep.then(() => {\n      const files = fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => file && !file.error)\n      const failed = files.filter((file) => file && file.error)\n      this.addResultData(uploadID, { successful, failed, uploadID })\n\n      const { currentUploads } = this.getState()\n      if (!currentUploads[uploadID]) {\n        this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n        return\n      }\n\n      const result = currentUploads[uploadID].result\n      this.emit('complete', result)\n\n      this._removeUpload(uploadID)\n\n      return result\n    })\n  }\n\n    /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @return {Promise}\n   */\n  upload () {\n    if (!this.plugins.uploader) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    return Promise.resolve()\n      .then(() => this.opts.onBeforeUpload(this.getState().files))\n      .then(() => this._checkMinNumberOfFiles())\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.keys(currentUploads).reduce((prev, curr) => prev.concat(currentUploads[curr].fileIDs), [])\n\n        const waitingFileIDs = []\n        Object.keys(this.getState().files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this._createUpload(waitingFileIDs)\n        return this._runUpload(uploadID)\n      })\n      .catch((err) => {\n        const message = typeof err === 'object' ? err.message : err\n        this.log(message)\n        this.info(message, 'error', 4000)\n        return Promise.reject(typeof err === 'object' ? err : new Error(err))\n      })\n  }\n}\n\nmodule.exports = function (opts) {\n  return new Uppy(opts)\n}\n// Expose class constructor.\nmodule.exports.Uppy = Uppy\n"]}