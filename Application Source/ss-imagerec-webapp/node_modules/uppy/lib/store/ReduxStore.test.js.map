{"version":3,"sources":["../../src/store/ReduxStore.test.js"],"names":["ReduxStore","require","Redux","describe","createStore","reducers","reducer","combineReducers","uppy","it","r","store","expect","toBe","getState","toEqual","setState","a","b","expected","calls","listener","prevState","nextState","patch","subscribe","state","action","type","payload","dispatch","_id","hello","id","selector","world"],"mappings":"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","file":"ReduxStore.test.js","sourcesContent":["const ReduxStore = require('./ReduxStore')\nconst Redux = require('redux')\n\ndescribe('ReduxStore', () => {\n  function createStore (reducers = {}) {\n    const reducer = Redux.combineReducers(Object.assign({}, reducers, {\n      uppy: ReduxStore.reducer\n    }))\n    return Redux.createStore(reducer)\n  }\n\n  it('can be created with or without new', () => {\n    const r = createStore()\n    let store = ReduxStore({ store: r })\n    expect(typeof store).toBe('object')\n    store = new ReduxStore({ store: r })\n    expect(typeof store).toBe('object')\n  })\n\n  it('merges in state using `setState`', () => {\n    const r = createStore()\n    const store = ReduxStore({ store: r })\n    expect(store.getState()).toEqual({})\n\n    store.setState({\n      a: 1,\n      b: 2\n    })\n    expect(store.getState()).toEqual({ a: 1, b: 2 })\n\n    store.setState({ b: 3 })\n    expect(store.getState()).toEqual({ a: 1, b: 3 })\n  })\n\n  it('notifies subscriptions when state changes', () => {\n    let expected = []\n    let calls = 0\n    function listener (prevState, nextState, patch) {\n      calls++\n      expect([ prevState, nextState, patch ]).toEqual(expected)\n    }\n\n    const r = createStore()\n    const store = ReduxStore({ store: r })\n    store.subscribe(listener)\n\n    expected = [{}, { a: 1, b: 2 }, { a: 1, b: 2 }]\n    store.setState({\n      a: 1,\n      b: 2\n    })\n\n    expected = [{ a: 1, b: 2 }, { a: 1, b: 3 }, { b: 3 }]\n    store.setState({ b: 3 })\n\n    expect(calls).toBe(2)\n  })\n\n  it('fires `subscribe` if state is modified externally (eg redux devtools)', () => {\n    const reducer = Redux.combineReducers({ uppy: ReduxStore.reducer })\n    const r = Redux.createStore((state, action) => {\n      // Add a `SET` action that can change Uppy state without going through the Uppy reducer or action creator.\n      // Emulates Redux Devtools.\n      if (action.type === 'SET') return action.payload\n      return reducer(state, action)\n    })\n\n    let expected = []\n    let calls = 0\n    function listener (prevState, nextState, patch) {\n      calls++\n      expect([ prevState, nextState, patch ]).toEqual(expected)\n    }\n\n    const store = ReduxStore({ store: r })\n    store.subscribe(listener)\n\n    expected = [{}, { a: 1 }, { a: 1 }]\n    store.setState({ a: 1 })\n\n    expected = [{ a: 1 }, { b: 2 }, { b: 2 }]\n    // redux-devtools's `JUMP_TO_STATE` is similar to this.\n    r.dispatch({\n      type: 'SET',\n      payload: {\n        uppy: {\n          [store._id]: { b: 2 }\n        }\n      }\n    })\n\n    expect(calls).toBe(2)\n  })\n\n  it('can mount in a custom state key', () => {\n    const reducer = Redux.combineReducers({\n      hello: ReduxStore.reducer\n    })\n    const r = Redux.createStore(reducer)\n    const store = ReduxStore({\n      store: r,\n      id: 'world',\n      selector: state => state.hello.world\n    })\n    store.setState({ a: 1 })\n\n    expect(r.getState()).toEqual({\n      hello: {\n        world: {\n          a: 1\n        }\n      }\n    })\n  })\n})\n"]}