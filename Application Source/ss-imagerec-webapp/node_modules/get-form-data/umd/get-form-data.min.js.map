{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///get-form-data.min.js","webpack:///webpack/bootstrap 5c78441198a010a04901","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","getFormData","form","options","arguments","length","undefined","trim","Error","data","elementName","elementNames","elementNameLookup","elements","element","IGNORED_ELEMENT_TYPES","type","disabled","id","push","value","getFieldData","fieldName","toString","NODE_LIST_CLASSES","getFormElementValue","allRadios","concat","selectedIndex","selected","multiple","slice","files","CHECKED_INPUT_TYPES","checked","replace","TRIM_RE","[object HTMLCollection]","[object NodeList]","[object RadioNodeList]","button","fieldset","reset","submit","checkbox","radio","Array"],"mappings":";;;;CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GAEjCL,EAAOD,QAAUM,EAAoB,IAK/B,SAAUL,EAAQ8B,EAAqBzB,GAE7C,YEvDe,SAAS0B,GAAYC,GAA+B,GAAzBC,GAAyBC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,IAAdG,MAAM,EACzD,KAAKL,EACH,KAAM,IAAIM,OAAJ,qDAA+DN,EASvE,KAAK,GANDO,MACAC,SACAC,KACAC,KAGKlC,EAAI,EAAGC,EAAIuB,EAAKW,SAASR,OAAQ3B,EAAIC,EAAGD,IAAK,CACpD,GAAIoC,GAAUZ,EAAKW,SAASnC,EACxBqC,GAAsBD,EAAQE,OAASF,EAAQG,WAGnDP,EAAcI,EAAQ9B,MAAQ8B,EAAQI,MAClBN,EAAkBF,KACpCC,EAAaQ,KAAKT,GAClBE,EAAkBF,IAAe,GAMrC,IAAK,GAAIhC,GAAI,EAAGC,EAAIgC,EAAaN,OAAQ3B,EAAIC,EAAGD,IAAK,CACnDgC,EAAcC,EAAajC,EAC3B,IAAI0C,GAAQC,EAAanB,EAAMQ,EAAaP,EAC/B,OAATiB,IACFX,EAAKC,GAAeU,GAIxB,MAAOX,GAWF,QAASY,GAAanB,EAAMoB,GAAoC,GAAzBnB,GAAyBC,UAAAC,OAAA,OAAAC,KAAAF,UAAA,GAAAA,UAAA,IAAdG,MAAM,EAC7D,KAAKL,EACH,KAAM,IAAIM,OAAJ,sDAAgEN,EAExE,KAAKoB,GAA0C,oBAA7BC,EAAS3C,KAAK0C,GAC9B,KAAM,IAAId,OAAJ,iEAA2Ec,EAGnF,IAAIR,GAAUZ,EAAKW,SAASS,EAC5B,KAAKR,GAAWA,EAAQG,SACtB,MAAO,KAGT,KAAKO,EAAkBD,EAAS3C,KAAKkC,IACnC,MAAOW,GAAoBX,EAASX,EAAQI,KAM9C,KAAK,GAFDE,MACAiB,GAAY,EACPhD,EAAI,EAAGC,EAAImC,EAAQT,OAAQ3B,EAAIC,EAAGD,IACzC,IAAIoC,EAAQpC,GAAGuC,SAAf,CAGIS,GAAiC,UAApBZ,EAAQpC,GAAGsC,OAC1BU,GAAY,EAEd,IAAIN,GAAQK,EAAoBX,EAAQpC,GAAIyB,EAAQI,KACvC,OAATa,IACFX,EAAOA,EAAKkB,OAAOP,IAMvB,MAAIM,IAA6B,IAAhBjB,EAAKJ,OACbI,EAAK,GAGNA,EAAKJ,OAAS,EAAII,EAAO,KASnC,QAASgB,GAAoBX,EAASP,GACpC,GAAIa,GAAQ,KACPJ,EAAQF,EAARE,IAEL,IAAa,eAATA,EAIF,MAHIF,GAAQX,QAAQE,SAClBe,EAAQN,EAAQX,QAAQW,EAAQc,eAAeR,OAE1CA,CAGT,IAAa,oBAATJ,EAA4B,CAC9BI,IACA,KAAK,GAAI1C,GAAI,EAAGC,EAAImC,EAAQX,QAAQE,OAAQ3B,EAAIC,EAAGD,IAC7CoC,EAAQX,QAAQzB,GAAGmD,UACrBT,EAAMD,KAAKL,EAAQX,QAAQzB,GAAG0C,MAMlC,OAHqB,KAAjBA,EAAMf,SACRe,EAAQ,MAEHA,EAKT,MAAa,SAATJ,GAAmB,SAAWF,IAC5BA,EAAQgB,UACVV,EAAQW,EAAMnD,KAAKkC,EAAQkB,OACN,IAAjBZ,EAAMf,SACRe,EAAQ,OAKVA,EAAQN,EAAQkB,MAAM,GAEjBZ,IAGJa,EAAoBjB,GAGhBF,EAAQoB,UACfd,EAAQN,EAAQM,OAHhBA,EAASb,EAAOO,EAAQM,MAAMe,QAAQC,EAAS,IAAMtB,EAAQM,MAMxDA,GFnFTjC,OAAOC,eAAeY,EAAqB,cAAgBoB,OAAO,IACjCpB,EAA6B,QAAIC,EExFlED,EAAA,aAAAqB,CAAA,IAAMG,IACJa,2BAA2B,EAC3BC,qBAAqB,EACrBC,0BAA0B,GAItBxB,GACJyB,QAAU,EACVC,UAAY,EACZC,OAAS,EACTC,QAAU,GAGNV,GACJW,UAAY,EACZC,OAAS,GAGLT,EAAU,aAETL,EAASe,MAAMlD,UAAfmC,MACAR,EAAYpC,OAAOS,UAAnB2B,QAwJPtB,GAAYoB,aAAeA,KFgGN","file":"get-form-data.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"getFormData\"] = factory();\n\telse\n\t\troot[\"getFormData\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"getFormData\"] = factory();\n\telse\n\t\troot[\"getFormData\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"default\"] = getFormData;\n/* harmony export (immutable) */ __webpack_exports__[\"getFieldData\"] = getFieldData;\nvar NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n\n  // .type values for elements which can appear in .elements and should be ignored\n};var IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  'reset': true,\n  'submit': true\n};\n\nvar CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n};\n\nvar TRIM_RE = /^\\s+|\\s+$/g;\n\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n\n/**\n * @param {HTMLFormElement} form\n * @param {Object} options\n * @return {Object.<string,(string|Array.<string>)>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\n\nfunction getFormData(form) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { trim: false };\n\n  if (!form) {\n    throw new Error('A form is required by getFormData, was given form=' + form);\n  }\n\n  var data = {};\n  var elementName = void 0;\n  var elementNames = [];\n  var elementNameLookup = {};\n\n  // Get unique submittable element names for the form\n  for (var i = 0, l = form.elements.length; i < l; i++) {\n    var element = form.elements[i];\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {\n      continue;\n    }\n    elementName = element.name || element.id;\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName);\n      elementNameLookup[elementName] = true;\n    }\n  }\n\n  // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n  for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {\n    elementName = elementNames[_i];\n    var value = getFieldData(form, elementName, options);\n    if (value != null) {\n      data[elementName] = value;\n    }\n  }\n\n  return data;\n}\n\n/**\n * @param {HTMLFormElement} form\n * @param {string} fieldName\n * @param {Object} options\n * @return {(string|Array.<string>)} submittable value(s) in the form for a\n *   named element from its .elements collection, or null if there was no\n *   element with that name or the element had no submittable value(s).\n */\nfunction getFieldData(form, fieldName) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { trim: false };\n\n  if (!form) {\n    throw new Error('A form is required by getFieldData, was given form=' + form);\n  }\n  if (!fieldName && toString.call(fieldName) !== '[object String]') {\n    throw new Error('A field name is required by getFieldData, was given fieldName=' + fieldName);\n  }\n\n  var element = form.elements[fieldName];\n  if (!element || element.disabled) {\n    return null;\n  }\n\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim);\n  }\n\n  // Deal with multiple form controls which have the same name\n  var data = [];\n  var allRadios = true;\n  for (var i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled) {\n      continue;\n    }\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false;\n    }\n    var value = getFormElementValue(element[i], options.trim);\n    if (value != null) {\n      data = data.concat(value);\n    }\n  }\n\n  // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n  if (allRadios && data.length === 1) {\n    return data[0];\n  }\n\n  return data.length > 0 ? data : null;\n}\n\n/**\n * @param {HTMLElement} element a form element.\n * @param {booleam} trim should values for text entry inputs be trimmed?\n * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable\n *   value(s), or null if it had none.\n */\nfunction getFormElementValue(element, trim) {\n  var value = null;\n  var type = element.type;\n\n\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value;\n    }\n    return value;\n  }\n\n  if (type === 'select-multiple') {\n    value = [];\n    for (var i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value);\n      }\n    }\n    if (value.length === 0) {\n      value = null;\n    }\n    return value;\n  }\n\n  // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files);\n      if (value.length === 0) {\n        value = null;\n      }\n    } else {\n      // Should be null if not present, according to the spec\n      value = element.files[0];\n    }\n    return value;\n  }\n\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n  } else if (element.checked) {\n    value = element.value;\n  }\n\n  return value;\n}\n\n// For UMD build access to getFieldData\ngetFormData.getFieldData = getFieldData;\n\n/***/ })\n/******/ ])[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// get-form-data.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5c78441198a010a04901","const NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n}\n\n// .type values for elements which can appear in .elements and should be ignored\nconst IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  'reset': true,\n  'submit': true\n}\n\nconst CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n}\n\nconst TRIM_RE = /^\\s+|\\s+$/g\n\nconst {slice} = Array.prototype\nconst {toString} = Object.prototype\n\n/**\n * @param {HTMLFormElement} form\n * @param {Object} options\n * @return {Object.<string,(string|Array.<string>)>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\nexport default function getFormData(form, options = {trim: false}) {\n  if (!form) {\n    throw new Error(`A form is required by getFormData, was given form=${form}`)\n  }\n\n  let data = {}\n  let elementName\n  let elementNames = []\n  let elementNameLookup = {}\n\n  // Get unique submittable element names for the form\n  for (let i = 0, l = form.elements.length; i < l; i++) {\n    let element = form.elements[i]\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {\n      continue\n    }\n    elementName = element.name || element.id\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName)\n      elementNameLookup[elementName] = true\n    }\n  }\n\n  // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n  for (let i = 0, l = elementNames.length; i < l; i++) {\n    elementName = elementNames[i]\n    let value = getFieldData(form, elementName, options)\n    if (value != null) {\n      data[elementName] = value\n    }\n  }\n\n  return data\n}\n\n/**\n * @param {HTMLFormElement} form\n * @param {string} fieldName\n * @param {Object} options\n * @return {(string|Array.<string>)} submittable value(s) in the form for a\n *   named element from its .elements collection, or null if there was no\n *   element with that name or the element had no submittable value(s).\n */\nexport function getFieldData(form, fieldName, options = {trim: false}) {\n  if (!form) {\n    throw new Error(`A form is required by getFieldData, was given form=${form}`)\n  }\n  if (!fieldName && toString.call(fieldName) !== '[object String]') {\n    throw new Error(`A field name is required by getFieldData, was given fieldName=${fieldName}`)\n  }\n\n  let element = form.elements[fieldName]\n  if (!element || element.disabled) {\n    return null\n  }\n\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim)\n  }\n\n  // Deal with multiple form controls which have the same name\n  let data = []\n  let allRadios = true\n  for (let i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled) {\n      continue\n    }\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false\n    }\n    let value = getFormElementValue(element[i], options.trim)\n    if (value != null) {\n      data = data.concat(value)\n    }\n  }\n\n  // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n  if (allRadios && data.length === 1) {\n    return data[0]\n  }\n\n  return (data.length > 0 ? data : null)\n}\n\n/**\n * @param {HTMLElement} element a form element.\n * @param {booleam} trim should values for text entry inputs be trimmed?\n * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable\n *   value(s), or null if it had none.\n */\nfunction getFormElementValue(element, trim) {\n  let value = null\n  let {type} = element\n\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value\n    }\n    return value\n  }\n\n  if (type === 'select-multiple') {\n    value = []\n    for (let i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value)\n      }\n    }\n    if (value.length === 0) {\n      value = null\n    }\n    return value\n  }\n\n  // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files)\n      if (value.length === 0) {\n        value = null\n      }\n    }\n    else {\n      // Should be null if not present, according to the spec\n      value = element.files[0]\n    }\n    return value\n  }\n\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = (trim ? element.value.replace(TRIM_RE, '') : element.value)\n  }\n  else if (element.checked) {\n    value = element.value\n  }\n\n  return value\n}\n\n// For UMD build access to getFieldData\ngetFormData.getFieldData = getFieldData\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}