{"version":3,"file":"material-list.umd.min.js","sources":["../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["focusedOption","this","options","toArray","focusedIndex","toggle","option","_setSelected","isSelected","hasChanged","_reportValueChange","MatSelectionList","decorators","inputs","host","role","[tabIndex]","class","(focus)","(blur)","(keydown)","[attr.aria-disabled]","template","styles","encapsulation","ViewEncapsulation","None","providers","MAT_SELECTION_LIST_VALUE_ACCESSOR","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","type","ElementRef","ContentChildren","args","MatListOption","selectionChange","Output","disabled","Input","_MatSelectionListMixinBase","NgModule","imports","MatLineModule","MatRippleModule","MatCommonModule","MatPseudoCheckboxModule","CommonModule","exports","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","declarations","MatListModule","_MatListMixinBase","_this","_navList","_isNavList","prototype","ngAfterContentInit","_handleFocus","_element","nativeElement","classList","add","_handleBlur","remove","Component","selector","exportAs","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","Optional","MatSelectionListBase","mixinDisableRipple","MatListOptionBase","_MatListOptionMixinBase","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MatSelectionListChange","source","_changeDetector","selectionList","_super","call","_selected","_disabled","_hasFocus","checkboxPosition","tslib_1.__extends","Object","defineProperty","value","newValue","coerceBooleanProperty","markForCheck","selectedOptions","ngOnInit","wasSelected","Promise","resolve","then","selected","MatLineSetter","_lines","ngOnDestroy","_removeOptionFromList","focus","getLabel","_text","textContent","_isRippleDisabled","disableRipple","_handleClick","_emitChangeEvent","_setFocusedOption","_onTouched","_getHostElement","select","deselect","_markForCheck","(click)","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","Inject","propDecorators","get","enumerable","configurable","withWrap","withTypeAhead","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","subscribe","event","_i","_a","added","length","item","removed","_b","_c","optionIndex","_getOptionIndex","_keyManager","setNextItemActive","manager","previousFocusIndex","activeItemIndex","keyCode","SPACE","ENTER","_toggleSelectOnFocusedOption","preventDefault","HOME","END","setFirstItemActive","setLastItemActive","A","ctrlKey","find","selectAll","deselectAll","onKeydown","UP_ARROW","DOWN_ARROW","shiftKey","_onChange","_getSelectedOptionValues","values","forEach","isDisabled","map","compareWith","filter","Boolean","__extends","d","b","__","constructor","extendStatics","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MatListBase","MatListItemBase","_MatListItemMixinBase","apply","arguments"],"mappings":"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"}