{"version":3,"file":"material-autocomplete.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","getMatAutocompleteMissingPanelError","Error","setPrototypeOf","__proto__","Array","p","hasOwnProperty","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_this","_super","call","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","opened","closed","_classList","id","_autoActiveFirstOption","tslib_1.__extends","defineProperty","value","coerceBooleanProperty","length","split","forEach","className","trim","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","_setVisibility","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","emit","type","Component","args","selector","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","inputs","host","class","providers","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","undefined","decorators","Inject","propDecorators","ContentChildren","MatOption","descendants","optionGroups","MatOptgroup","Input","Output","classList","MatAutocompleteOrigin","elementRef","Directive","ElementRef","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","_element","_overlay","_viewContainerRef","_zone","_scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","Subscription","EMPTY","_closeKeyEventStream","Subject","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","merge","apply","map","onSelectionChange","onStable","asObservable","pipe","take","switchMap","ngOnDestroy","unsubscribe","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","panelOpen","_overlayRef","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","filter","_outsideClickStream","detachments","observableOf","MatOptionSelectionChange","activeItem","fromEvent","clickTarget","formField","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","ESCAPE","preventDefault","UP_ARROW","altKey","_resetActiveItem","next","stopPropagation","activeOption","ENTER","_selectViaInteraction","prevActiveItem","isArrowKey","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","_handleInput","target","parseFloat","_previousValue","document","activeElement","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","index","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","newScrollPosition","_getOptionScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","changes","tap","_positionStrategy","reapplyLastPosition","delay","updatePosition","panelClosingActions","subscribe","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","selected","deselect","updateSize","width","_getHostWidth","_portal","TemplatePortal","_getOverlayConfig","change","attach","wasOpen","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","position","flexibleConnectedTo","_getConnectedElement","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","connectedTo","getConnectedOverlayOrigin","getBoundingClientRect","setActiveItem","element","readOnly","[attr.autocomplete]","[attr.role]","[attr.aria-autocomplete]","[attr.aria-activedescendant]","[attr.aria-expanded]","[attr.aria-owns]","(focusin)","(blur)","(input)","(keydown)","ViewContainerRef","NgZone","ChangeDetectorRef","Directionality","Optional","MatFormField","Host","DOCUMENT","ViewportRuler","autocompleteDisabled","NgModule","imports","MatOptionModule","OverlayModule","MatCommonModule","CommonModule","exports","declarations","MatAutocompleteModule"],"mappings":"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"}