{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @deletion-target 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection());\n\n    this._keyManager.updateActiveItemIndex(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    this._realignInkBar = merge(dirChange, resize).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex == value || !this._keyManager) { return; }\n\n    this._keyManager.setActiveItem(value);\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const tabs = this._tabs.toArray();\n\n      // Maintain the previously-selected tab if a new tab is added or removed.\n      for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i].isActive) {\n          this._indexToSelect = i;\n          break;\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @deletion-target 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @deletion-target 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @deletion-target 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]>) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      this.getChildren(node).pipe(take(1)).subscribe(children => {\n        children.forEach((child, index) => {\n          let childParentMap: boolean[] = parentMap.slice();\n          childParentMap.push(index != children.length - 1);\n          this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n      });\n    }\n    return resultNodes;\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach((node) => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.3.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': 'autocompleteDisabled ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getHostWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input, TemplateRef} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(/** @docs-private */ public template: TemplateRef<any>) {\n    super(template);\n  }\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableDiffers, TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n  // TODO(andrewseguin): Remove this constructor after compiler-cli is updated; see issue #9329\n  constructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\n}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @deletion-target 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero.\n        left: left || null,\n        right: right || null,\n      };\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @deletion-target 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      this._dragPercentage = this._getDragPercentage(event.deltaX);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @deletion-target 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @deletion-targets 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @deletion-target 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** The id of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @deletion-target 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @deletion-target 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @deletion-target 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(filter(event => event.toState === 'void'), take(1))\n          .subscribe(() => {\n            menu.lazyContent!.detach();\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @deletion-target 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @deletion-target 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      const child = layoutElement.childNodes[i];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getPopupConnectionElementRef())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && this.focused) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /**\n   * The input's placeholder text.\n   * @deprecated Bind to the `placeholder` attribute directly.\n   * @deletion-target 7.0.0\n   */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deletion-target 7.0.0 deprecate in favor of `cdkTextareaAutosize`.\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @deletion-target 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      this._onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @deletion-target 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @deletion-target 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @deletion-target 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @deletion-target 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden',\n  },\n})\nexport class MatBadge implements OnDestroy {\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(val: string) {\n    this._content = val;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(containerInstance: MatBottomSheetContainer, private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @deletion-target 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @deletion-target 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @deletion-target 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @deletion-target 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @deletion-target 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @deletion-target 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","this","dirChange","_dir","change","observableOf","resize","_viewportRuler","realign","_updatePagination","_alignInkBarToSelectedTab","_keyManager","FocusKeyManager","_labelWrappers","withHorizontalOrientation","_getLayoutDirection","updateActiveItemIndex","requestAnimationFrame","_realignInkBar","merge","subscribe","MatTabHeader","prototype","ngOnDestroy","unsubscribe","_onContentChanges","_changeDetectorRef","markForCheck","_checkPaginationEnabled","_checkScrollingControls","_updateTabScrollPosition","Object","defineProperty","value","_isValidIndex","focusIndex","setActiveItem","indexFocused","emit","_setTabFocus","index","tab","toArray","disabled","tabIndex","_showPaginationControls","_scrollToLabel","length","focus","containerEl","_tabListContainer","nativeElement","dir","scrollLeft","scrollWidth","offsetWidth","scrollDistance","translateX","_tabList","style","transform","_scrollDistance","v","Math","max","min","_getMaxScrollDistance","_scrollDistanceChanged","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","_elementRef","_disableScrollBefore","_disableScrollAfter","selectedLabelWrapper","selectedIndex","elementRef","_inkBar","alignToElement","type","Component","args","selector","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","decorators","Optional","propDecorators","ViewChild","Input","selectFocusedIndex","Output","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","EventEmitter","focusChange","animationDone","selectedTabChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","_tabs","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","position","isActive","origin","ngAfterContentInit","_subscribeToTabLabels","changes","tabs","i","realignInkBar","_tabHeader","_focusChanged","event","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","_handleClick","tabHeader","idx","_getTabIndex","exportAs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","updateActiveLink","element","_activeLinkChanged","runOutsideAngular","pipe","takeUntil","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","next","complete","show","hide","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisabled","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","preventDefault","MatTabLink","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","(click)","Platform","undefined","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","MatStepHeader","iconOverrides","selected","optional","matStepperAnimations","horizontalStepTransition","trigger","state","visibility","transition","animate","verticalStepTransition","MatStepperIcon","templateRef","TemplateRef","name","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","animations","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepLabel","MatStepperIntl","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","CdkColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","_setStyles","positions","inkBar","left","width","viewContainerRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","componentFactoryResolver","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","_onCentering","_onCentered","_origin","_onTranslateTabStarted","e","toState","_onTranslateTabComplete","fromState","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","offsetLeft","MatTabHeaderBase","_MatTabHeaderMixinBase","_selectedIndexChanged","_tabLabelCount","_handleKeydown","keyCode","HOME","setFirstItemActive","END","setLastItemActive","ENTER","SPACE","onKeydown","ANIMATION_MODULE_TYPE","MatSlider","step","thumbLabel","tickInterval","displayWith","vertical","input","_sliderWrapper","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","detectChanges","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","top","bottom","create","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_stateChanges","start","_direction","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","deregister","delete","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","arrowPosition","keyframes","allowChildren","query","animateChild","sortButtonLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","MatSortModule","CdkStepLabel","optionalLabel","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","_left","_width","_right","opened","mode","_contentMargins","_contentMarginChanges","[class.mat-drawer-container-explicit-backdrop]","MatDrawerContainer","_drawers","MatDrawer","ContentChild","MatDrawerContent","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_animationMode","onChange","_","onTouched","_uniqueId","_required","_checked","_dragging","labelPosition","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","stopPropagation","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","focusVia","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","percentage","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","[class._mat-animation-noopable]","required","MatRipple","MatSlideToggleModule","MAT_SLIDER_VALUE_ACCESSOR","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundToDecimal","toString","split","pop","parseFloat","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","invert","percent","_isMinValue","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","pos","offset","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","getBoundingClientRect","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","MatProgressSpinner","diameters","Set","BASE_SIZE","styleTag","[style.width.px]","[style.height.px]","[attr.mode]","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","animationMode","defaults","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","onPositionChanged","_modeChanged","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","_openedStream","openedStart","_closedStream","closedStart","backdropClick","_doCheckSubject","_autosize","defaultAutosize","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","MatFormFieldControl","MatSelect","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","overlayDir","CdkConnectedOverlay","options","MatOption","optionGroups","MatOptgroup","customTrigger","MatSelectTrigger","placeholder","multiple","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","valueChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_updatePosition","_tooltipInstance","updatePosition","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","floor","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","MatProgressBarModule","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","platform","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","_attachStyleNode","_strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","_classList","newElevation","_previousElevation","MatMenu","addItem","item","_items","_itemChanges","removeItem","setPositionClasses","posX","posY","xPosition","yPosition","classes","_startAnimation","_panelAnimationState","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MAT_MENU_DEFAULT_OPTIONS","items","MatMenuItem","lazyContent","MatMenuContent","overlapTrigger","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_parentMenu","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","_triggersSubmenu","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","setElevation","depth","_highlighted","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","backdropClass","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","matSelectAnimations","transformPanel","minWidth","group","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","_positions","_disableOptionCentering","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","onStable","switchMap","o","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","panelOpen","offsetX","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","itemHeight","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","_getAriaLabelledby","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","focusedOption","focusedIndex","_setSelected","hasChanged","_reportValueChange","MatSelectionList","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_template","_componentFactoryResolver","_appRef","context","_outlet","DomPortalOutlet","insertBefore","outletElement","isAttached","ApplicationRef","sequence","MatMenuItemBase","_MatMenuItemMixinBase","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS_FACTORY","_xPosition","_yPosition","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","className","withWrap","setFocusOrigin","resetActiveItem","customElevation","c","_MatListMixinBase","_navList","_isNavList","_handleFocus","_handleBlur","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","MatLineSetter","_lines","_removeOptionFromList","_text","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","FixedTileStyler","reset","list","_setListStyle","_tiles","tile","_setStyle","TileStyler","RatioTileStyler","_parseRatio","setRowStyles","rowIndex","percentWidth","gutterWidth","percentHeightPerTile","rowHeightRatio","baseTileHeight","getBaseTileSize","getTilePosition","calc","getTileSize","rowspan","getComputedHeight","getTileSpan","getGutterSpan","ratioParts","FitTileStyler","_rowspan","gutterHeightPerTile","_rows","MatGridList","_gutter","_cols","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","cols","rowHeight","_tileStyler","tracker","TileCoordinator","init","gutterSize","setStyle","row","col","MatGridTile","MatGridTileText","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","MatGridAvatarCssMatStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","_inputSubscription","_disabledChange","_popupRef","_popupComponentRef","date","_dateAdapter","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDatepicker","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","createMissingDateImplError","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","numColumns","tiles","columnIndex","fill","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","_gutterSize","normalizeUnits","sizePercent","gutterFraction","baseSize","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","baseTileWidth","side","tileHeight","fixedRowHeight","_init","_dateSelected","_selectedDate","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_handleCalendarBodyKeydown","oldActiveDate","_activeDate","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","activeDateChange","_focusActiveCell","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","minDate","maxDate","_hasSameMonthAndYear","d1","d2","validDate","clampDate","_selectedYear","_minDate","_maxDate","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","location","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","MatCardHeader","MatCardTitleGroup","MatCard","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_chipInput","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_chipRemoveSubscription","_dropSubscriptions","inputElement","_focusInput","_isInputEmpty","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getHostWidth","wasOpen","_getConnectedElement","connectedTo","autoActiveFirstOption","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocomplete","MatAutocompleteModule","MatBadge","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","optionSelected","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}