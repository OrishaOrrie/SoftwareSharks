{"version":3,"sources":["../../src/core/Translator.js"],"names":["module","exports","opts","defaultOptions","locale","strings","pluralize","n","interpolate","phrase","options","replace","String","prototype","dollarRegex","dollarBillsYall","arg","hasOwnProperty","replacement","call","RegExp","translate","key","smart_count","plural"],"mappings":";;;;AAAA;;;;;;;;;;;;;AAaAA,OAAOC,OAAP;AACE,sBAAaC,IAAb,EAAmB;AAAA;;AACjB,QAAMC,iBAAiB;AACrBC,cAAQ;AACNC,iBAAS,EADH;AAENC,mBAAW,mBAAUC,CAAV,EAAa;AACtB,cAAIA,MAAM,CAAV,EAAa;AACX,mBAAO,CAAP;AACD;AACD,iBAAO,CAAP;AACD;AAPK;AADa,KAAvB;;AAYA,SAAKL,IAAL,GAAY,SAAc,EAAd,EAAkBC,cAAlB,EAAkCD,IAAlC,CAAZ;AACA,SAAKE,MAAL,GAAc,SAAc,EAAd,EAAkBD,eAAeC,MAAjC,EAAyCF,KAAKE,MAA9C,CAAd;;AAEA;;AAEA;AACA;AACD;;AAEH;;;;;;;;;;;;;AAvBA,uBAkCEI,WAlCF,wBAkCeC,MAlCf,EAkCuBC,OAlCvB,EAkCgC;AAC5B,QAAMC,UAAUC,OAAOC,SAAP,CAAiBF,OAAjC;AACA,QAAMG,cAAc,KAApB;AACA,QAAMC,kBAAkB,MAAxB;;AAEA,SAAK,IAAIC,GAAT,IAAgBN,OAAhB,EAAyB;AACvB,UAAIM,QAAQ,GAAR,IAAeN,QAAQO,cAAR,CAAuBD,GAAvB,CAAnB,EAAgD;AAC9C;AACA;AACA;AACA,YAAIE,cAAcR,QAAQM,GAAR,CAAlB;AACA,YAAI,OAAOE,WAAP,KAAuB,QAA3B,EAAqC;AACnCA,wBAAcP,QAAQQ,IAAR,CAAaT,QAAQM,GAAR,CAAb,EAA2BF,WAA3B,EAAwCC,eAAxC,CAAd;AACD;AACD;AACA;AACA;AACAN,iBAASE,QAAQQ,IAAR,CAAaV,MAAb,EAAqB,IAAIW,MAAJ,CAAW,SAASJ,GAAT,GAAe,KAA1B,EAAiC,GAAjC,CAArB,EAA4DE,WAA5D,CAAT;AACD;AACF;AACD,WAAOT,MAAP;AACD,GAvDH;;AAyDA;;;;;;;;;AAzDA,uBAgEEY,SAhEF,sBAgEaC,GAhEb,EAgEkBZ,OAhElB,EAgE2B;AACvB,QAAIA,WAAWA,QAAQa,WAAvB,EAAoC;AAClC,UAAIC,SAAS,KAAKpB,MAAL,CAAYE,SAAZ,CAAsBI,QAAQa,WAA9B,CAAb;AACA,aAAO,KAAKf,WAAL,CAAiB,KAAKN,IAAL,CAAUE,MAAV,CAAiBC,OAAjB,CAAyBiB,GAAzB,EAA8BE,MAA9B,CAAjB,EAAwDd,OAAxD,CAAP;AACD;;AAED,WAAO,KAAKF,WAAL,CAAiB,KAAKN,IAAL,CAAUE,MAAV,CAAiBC,OAAjB,CAAyBiB,GAAzB,CAAjB,EAAgDZ,OAAhD,CAAP;AACD,GAvEH;;AAAA;AAAA","file":"Translator.js","sourcesContent":["/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n *\n * @param {object} opts\n */\nmodule.exports = class Translator {\n  constructor (opts) {\n    const defaultOptions = {\n      locale: {\n        strings: {},\n        pluralize: function (n) {\n          if (n === 1) {\n            return 0\n          }\n          return 1\n        }\n      }\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultOptions.locale, opts.locale)\n\n    // console.log(this.opts.locale)\n\n    // this.locale.pluralize = this.locale ? this.locale.pluralize : defaultPluralize\n    // this.locale.strings = Object.assign({}, en_US.strings, this.opts.locale.strings)\n  }\n\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param {string} phrase that needs interpolation, with placeholders\n * @param {object} options with values that will be used to replace placeholders\n * @return {string} interpolated\n */\n  interpolate (phrase, options) {\n    const replace = String.prototype.replace\n    const dollarRegex = /\\$/g\n    const dollarBillsYall = '$$$$'\n\n    for (let arg in options) {\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg]\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall)\n        }\n        // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n        phrase = replace.call(phrase, new RegExp('%\\\\{' + arg + '\\\\}', 'g'), replacement)\n      }\n    }\n    return phrase\n  }\n\n/**\n * Public translate method\n *\n * @param {string} key\n * @param {object} options with values that will be used later to replace placeholders in string\n * @return {string} translated (and interpolated)\n */\n  translate (key, options) {\n    if (options && options.smart_count) {\n      var plural = this.locale.pluralize(options.smart_count)\n      return this.interpolate(this.opts.locale.strings[key][plural], options)\n    }\n\n    return this.interpolate(this.opts.locale.strings[key], options)\n  }\n}\n"]}