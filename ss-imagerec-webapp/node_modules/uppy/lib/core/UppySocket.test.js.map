{"version":3,"sources":["../../src/core/UppySocket.test.js"],"names":["UppySocket","require","describe","webSocketConstructorSpy","webSocketCloseSpy","webSocketSendSpy","beforeEach","jest","fn","global","WebSocket","target","close","args","send","json","triggerOpen","onopen","triggerClose","onclose","afterEach","undefined","it","expect","name","toEqual","mock","calls","uppySocket","webSocketInstance","socket","length","JSON","stringify","action","payload","queued","emitterListenerMock","on","onmessage","data","emit","once"],"mappings":"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","file":"UppySocket.test.js","sourcesContent":["const UppySocket = require('./UppySocket')\n\ndescribe('core/uppySocket', () => {\n  let webSocketConstructorSpy\n  let webSocketCloseSpy\n  let webSocketSendSpy\n\n  beforeEach(() => {\n    webSocketConstructorSpy = jest.fn()\n    webSocketCloseSpy = jest.fn()\n    webSocketSendSpy = jest.fn()\n\n    global.WebSocket = class WebSocket {\n      constructor (target) {\n        webSocketConstructorSpy(target)\n      }\n      close (args) {\n        webSocketCloseSpy(args)\n      }\n      send (json) {\n        webSocketSendSpy(json)\n      }\n      triggerOpen () {\n        this.onopen()\n      }\n      triggerClose () {\n        this.onclose()\n      }\n    }\n  })\n  afterEach(() => {\n    global.WebSocket = undefined\n  })\n\n  it('should expose a class', () => {\n    expect(UppySocket.name).toEqual('UppySocket')\n    expect(\n      new UppySocket({\n        target: 'foo'\n      }) instanceof UppySocket\n    )\n  })\n\n  it('should setup a new WebSocket', () => {\n    new UppySocket({ target: 'foo' }) // eslint-disable-line no-new\n    expect(webSocketConstructorSpy.mock.calls[0][0]).toEqual('foo')\n  })\n\n  it('should send a message via the websocket if the connection is open', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n    const webSocketInstance = uppySocket.socket\n    webSocketInstance.triggerOpen()\n\n    uppySocket.send('bar', 'boo')\n    expect(webSocketSendSpy.mock.calls.length).toEqual(1)\n    expect(webSocketSendSpy.mock.calls[0]).toEqual([\n      JSON.stringify({ action: 'bar', payload: 'boo' })\n    ])\n  })\n\n  it('should queue the message for the websocket if the connection is not open', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n\n    uppySocket.send('bar', 'boo')\n    expect(uppySocket.queued).toEqual([{ action: 'bar', payload: 'boo' }])\n    expect(webSocketSendSpy.mock.calls.length).toEqual(0)\n  })\n\n  it('should queue any messages for the websocket if the connection is not open, then send them when the connection is open', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n    const webSocketInstance = uppySocket.socket\n\n    uppySocket.send('bar', 'boo')\n    uppySocket.send('moo', 'baa')\n    expect(uppySocket.queued).toEqual([\n      { action: 'bar', payload: 'boo' },\n      { action: 'moo', payload: 'baa' }\n    ])\n    expect(webSocketSendSpy.mock.calls.length).toEqual(0)\n\n    webSocketInstance.triggerOpen()\n\n    expect(uppySocket.queued).toEqual([])\n    expect(webSocketSendSpy.mock.calls.length).toEqual(2)\n    expect(webSocketSendSpy.mock.calls[0]).toEqual([\n      JSON.stringify({ action: 'bar', payload: 'boo' })\n    ])\n    expect(webSocketSendSpy.mock.calls[1]).toEqual([\n      JSON.stringify({ action: 'moo', payload: 'baa' })\n    ])\n  })\n\n  it('should start queuing any messages when the websocket connection is closed', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n    const webSocketInstance = uppySocket.socket\n    webSocketInstance.triggerOpen()\n    uppySocket.send('bar', 'boo')\n    expect(uppySocket.queued).toEqual([])\n\n    webSocketInstance.triggerClose()\n    uppySocket.send('bar', 'boo')\n    expect(uppySocket.queued).toEqual([{ action: 'bar', payload: 'boo' }])\n  })\n\n  it('should close the websocket when it is force closed', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n    const webSocketInstance = uppySocket.socket\n    webSocketInstance.triggerOpen()\n\n    uppySocket.close()\n    expect(webSocketCloseSpy.mock.calls.length).toEqual(1)\n  })\n\n  it('should be able to subscribe to messages received on the websocket', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n    const webSocketInstance = uppySocket.socket\n\n    const emitterListenerMock = jest.fn()\n    uppySocket.on('hi', emitterListenerMock)\n\n    webSocketInstance.triggerOpen()\n    webSocketInstance.onmessage({\n      data: JSON.stringify({ action: 'hi', payload: 'ho' })\n    })\n    expect(emitterListenerMock.mock.calls).toEqual([\n      ['ho', undefined, undefined, undefined, undefined, undefined]\n    ])\n  })\n\n  it('should be able to emit messages and subscribe to them', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n\n    const emitterListenerMock = jest.fn()\n    uppySocket.on('hi', emitterListenerMock)\n\n    uppySocket.emit('hi', 'ho')\n    uppySocket.emit('hi', 'ho')\n    uppySocket.emit('hi', 'off to work we go')\n\n    expect(emitterListenerMock.mock.calls).toEqual([\n      ['ho', undefined, undefined, undefined, undefined, undefined],\n      ['ho', undefined, undefined, undefined, undefined, undefined],\n      [\n        'off to work we go',\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined\n      ]\n    ])\n  })\n\n  it('should be able to subscribe to the first event for a particular action', () => {\n    const uppySocket = new UppySocket({ target: 'foo' })\n\n    const emitterListenerMock = jest.fn()\n    uppySocket.once('hi', emitterListenerMock)\n\n    uppySocket.emit('hi', 'ho')\n    uppySocket.emit('hi', 'ho')\n    uppySocket.emit('hi', 'off to work we go')\n\n    expect(emitterListenerMock.mock.calls.length).toEqual(1)\n    expect(emitterListenerMock.mock.calls).toEqual([\n      ['ho', undefined, undefined, undefined, undefined, undefined]\n    ])\n  })\n})\n"]}