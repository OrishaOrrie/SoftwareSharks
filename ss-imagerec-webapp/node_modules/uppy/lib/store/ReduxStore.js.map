{"version":3,"sources":["../../src/store/ReduxStore.js"],"names":["cuid","require","STATE_UPDATE","defaultSelector","id","state","uppy","ReduxStore","opts","_store","store","_id","_selector","selector","setState","patch","dispatch","type","payload","getState","subscribe","cb","prevState","nextState","getPatch","prev","next","nextKeys","Object","keys","forEach","k","reducer","action","newState","middleware","module","exports","createReduxStore"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA;AACA,IAAMC,eAAe,mBAArB;;AAEA;AACA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACC,EAAD;AAAA,SAAQ,UAACC,KAAD;AAAA,WAAWA,MAAMC,IAAN,CAAWF,EAAX,CAAX;AAAA,GAAR;AAAA,CAAxB;;AAEA;;;;;;;;;;IASMG,U;AACJ,sBAAaC,IAAb,EAAmB;AAAA;;AACjB,SAAKC,MAAL,GAAcD,KAAKE,KAAnB;AACA,SAAKC,GAAL,GAAWH,KAAKJ,EAAL,IAAWJ,MAAtB;AACA,SAAKY,SAAL,GAAiBJ,KAAKK,QAAL,IAAiBV,gBAAgB,KAAKQ,GAArB,CAAlC;;AAEA;AACA,SAAKG,QAAL,CAAc,EAAd;AACD;;uBAEDA,Q,qBAAUC,K,EAAO;AACf,SAAKN,MAAL,CAAYO,QAAZ,CAAqB;AACnBC,YAAMf,YADa;AAEnBE,UAAI,KAAKO,GAFU;AAGnBO,eAASH;AAHU,KAArB;AAKD,G;;uBAEDI,Q,uBAAY;AACV,WAAO,KAAKP,SAAL,CAAe,KAAKH,MAAL,CAAYU,QAAZ,EAAf,CAAP;AACD,G;;uBAEDC,S,sBAAWC,E,EAAI;AAAA;;AACb,QAAIC,YAAY,KAAKH,QAAL,EAAhB;AACA,WAAO,KAAKV,MAAL,CAAYW,SAAZ,CAAsB,YAAM;AACjC,UAAMG,YAAY,MAAKJ,QAAL,EAAlB;AACA,UAAIG,cAAcC,SAAlB,EAA6B;AAC3B,YAAMR,QAAQS,SAASF,SAAT,EAAoBC,SAApB,CAAd;AACAF,WAAGC,SAAH,EAAcC,SAAd,EAAyBR,KAAzB;AACAO,oBAAYC,SAAZ;AACD;AACF,KAPM,CAAP;AAQD,G;;;;;AAGH,SAASC,QAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AAC7B,MAAMC,WAAWC,OAAOC,IAAP,CAAYH,IAAZ,CAAjB;AACA,MAAMX,QAAQ,EAAd;AACAY,WAASG,OAAT,CAAiB,UAACC,CAAD,EAAO;AACtB,QAAIN,KAAKM,CAAL,MAAYL,KAAKK,CAAL,CAAhB,EAAyBhB,MAAMgB,CAAN,IAAWL,KAAKK,CAAL,CAAX;AAC1B,GAFD;AAGA,SAAOhB,KAAP;AACD;;AAED,SAASiB,OAAT,GAAsC;AAAA,MAApB3B,KAAoB,uEAAZ,EAAY;AAAA,MAAR4B,MAAQ;;AACpC,MAAIA,OAAOhB,IAAP,KAAgBf,YAApB,EAAkC;AAAA;;AAChC,QAAMgC,WAAW,SAAc,EAAd,EAAkB7B,MAAM4B,OAAO7B,EAAb,CAAlB,EAAoC6B,OAAOf,OAA3C,CAAjB;AACA,WAAO,SAAc,EAAd,EAAkBb,KAAlB,6BACJ4B,OAAO7B,EADH,IACQ8B,QADR,aAAP;AAGD;AACD,SAAO7B,KAAP;AACD;;AAED,SAAS8B,UAAT,GAAuB;AACrB;AACA,SAAO;AAAA,WAAM,UAACT,IAAD;AAAA,aAAU,UAACO,MAAD,EAAY;AACjCP,aAAKO,MAAL;AACD,OAFY;AAAA,KAAN;AAAA,GAAP;AAGD;;AAEDG,OAAOC,OAAP,GAAiB,SAASC,gBAAT,CAA2B9B,IAA3B,EAAiC;AAChD,SAAO,IAAID,UAAJ,CAAeC,IAAf,CAAP;AACD,CAFD;;AAIA4B,OAAOC,OAAP,CAAenC,YAAf,GAA8BA,YAA9B;AACAkC,OAAOC,OAAP,CAAeL,OAAf,GAAyBA,OAAzB;AACAI,OAAOC,OAAP,CAAeF,UAAf,GAA4BA,UAA5B","file":"ReduxStore.js","sourcesContent":["const cuid = require('cuid')\n\n// Redux action name.\nconst STATE_UPDATE = 'uppy/STATE_UPDATE'\n\n// Pluck Uppy state from the Redux store in the default location.\nconst defaultSelector = (id) => (state) => state.uppy[id]\n\n/**\n * Redux store.\n *\n * @param {object} opts.store - The Redux store to use.\n * @param {string} opts.id - This store instance's ID. Defaults to a random string.\n *    If you need to access Uppy state through Redux, eg. to render custom UI, set this to something constant.\n * @param {function} opts.selector - Function, `(state) => uppyState`, to pluck state from the Redux store.\n *    Defaults to retrieving `state.uppy[opts.id]`. Override if you placed Uppy state elsewhere in the Redux store.\n */\nclass ReduxStore {\n  constructor (opts) {\n    this._store = opts.store\n    this._id = opts.id || cuid()\n    this._selector = opts.selector || defaultSelector(this._id)\n\n    // Initialise the `uppy[id]` state key.\n    this.setState({})\n  }\n\n  setState (patch) {\n    this._store.dispatch({\n      type: STATE_UPDATE,\n      id: this._id,\n      payload: patch\n    })\n  }\n\n  getState () {\n    return this._selector(this._store.getState())\n  }\n\n  subscribe (cb) {\n    let prevState = this.getState()\n    return this._store.subscribe(() => {\n      const nextState = this.getState()\n      if (prevState !== nextState) {\n        const patch = getPatch(prevState, nextState)\n        cb(prevState, nextState, patch)\n        prevState = nextState\n      }\n    })\n  }\n}\n\nfunction getPatch (prev, next) {\n  const nextKeys = Object.keys(next)\n  const patch = {}\n  nextKeys.forEach((k) => {\n    if (prev[k] !== next[k]) patch[k] = next[k]\n  })\n  return patch\n}\n\nfunction reducer (state = {}, action) {\n  if (action.type === STATE_UPDATE) {\n    const newState = Object.assign({}, state[action.id], action.payload)\n    return Object.assign({}, state, {\n      [action.id]: newState\n    })\n  }\n  return state\n}\n\nfunction middleware () {\n  // Do nothing, at the moment.\n  return () => (next) => (action) => {\n    next(action)\n  }\n}\n\nmodule.exports = function createReduxStore (opts) {\n  return new ReduxStore(opts)\n}\n\nmodule.exports.STATE_UPDATE = STATE_UPDATE\nmodule.exports.reducer = reducer\nmodule.exports.middleware = middleware\n"]}