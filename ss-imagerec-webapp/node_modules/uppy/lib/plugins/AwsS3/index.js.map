{"version":3,"sources":["../../../src/plugins/AwsS3/index.js"],"names":["Plugin","require","Translator","limitPromises","XHRUpload","isXml","xhr","contentType","headers","getResponseHeader","toLowerCase","module","exports","uppy","opts","type","id","title","defaultLocale","strings","preparingUpload","defaultOptions","timeout","limit","getUploadParameters","bind","locale","translator","i18n","translate","prepareUpload","limitRequests","fn","file","host","Error","filename","encodeURIComponent","name","fetch","method","accept","then","response","json","validateParameters","params","valid","url","fields","test","err","TypeError","console","error","fileIDs","forEach","getFile","emit","mode","message","value","all","map","paramsPromise","resolve","catch","responses","updatedFiles","index","xhrOpts","formData","endpoint","metaFields","Object","keys","updatedFile","meta","xhrUpload","setState","files","getState","install","addPreProcessor","use","fieldName","responseUrlFieldName","getResponseData","content","location","responseURL","getValue","responseXML","key","el","querySelector","textContent","responseText","start","indexOf","end","slice","length","bucket","etag","getResponseError","uninstall","uploader","getPlugin","removePlugin","removePreProcessor"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\nconst Translator = require('../../core/Translator')\nconst { limitPromises } = require('../../core/Utils')\nconst XHRUpload = require('../XHRUpload')\n\nfunction isXml (xhr) {\n  const contentType = xhr.headers ? xhr.headers['content-type'] : xhr.getResponseHeader('Content-Type')\n  return typeof contentType === 'string' && contentType.toLowerCase() === 'application/xml'\n}\n\nmodule.exports = class AwsS3 extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'AwsS3'\n    this.title = 'AWS S3'\n\n    const defaultLocale = {\n      strings: {\n        preparingUpload: 'Preparing upload...'\n      }\n    }\n\n    const defaultOptions = {\n      timeout: 30 * 1000,\n      limit: 0,\n      getUploadParameters: this.getUploadParameters.bind(this),\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n\n    if (typeof this.opts.limit === 'number' && this.opts.limit !== 0) {\n      this.limitRequests = limitPromises(this.opts.limit)\n    } else {\n      this.limitRequests = (fn) => fn\n    }\n  }\n\n  getUploadParameters (file) {\n    if (!this.opts.host) {\n      throw new Error('Expected a `host` option containing an uppy-server address.')\n    }\n\n    const filename = encodeURIComponent(file.name)\n    const type = encodeURIComponent(file.type)\n    return fetch(`${this.opts.host}/s3/params?filename=${filename}&type=${type}`, {\n      method: 'get',\n      headers: { accept: 'application/json' }\n    }).then((response) => response.json())\n  }\n\n  validateParameters (file, params) {\n    const valid = typeof params === 'object' && params &&\n      typeof params.url === 'string' &&\n      (typeof params.fields === 'object' || params.fields == null) &&\n      (params.method == null || /^(put|post)$/i.test(params.method))\n\n    if (!valid) {\n      const err = new TypeError(`AwsS3: got incorrect result from 'getUploadParameters()' for file '${file.name}', expected an object '{ url, method, fields }'.\\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.`)\n      console.error(err)\n      throw err\n    }\n\n    return params\n  }\n\n  prepareUpload (fileIDs) {\n    fileIDs.forEach((id) => {\n      const file = this.uppy.getFile(id)\n      this.uppy.emit('preprocess-progress', file, {\n        mode: 'determinate',\n        message: this.i18n('preparingUpload'),\n        value: 0\n      })\n    })\n\n    const getUploadParameters = this.limitRequests(this.opts.getUploadParameters)\n\n    return Promise.all(\n      fileIDs.map((id) => {\n        const file = this.uppy.getFile(id)\n        const paramsPromise = Promise.resolve()\n          .then(() => getUploadParameters(file))\n        return paramsPromise.then((params) => {\n          return this.validateParameters(file, params)\n        }).then((params) => {\n          this.uppy.emit('preprocess-progress', file, {\n            mode: 'determinate',\n            message: this.i18n('preparingUpload'),\n            value: 1\n          })\n          return params\n        }).catch((error) => {\n          this.uppy.emit('upload-error', file, error)\n        })\n      })\n    ).then((responses) => {\n      const updatedFiles = {}\n      fileIDs.forEach((id, index) => {\n        const file = this.uppy.getFile(id)\n        if (file.error) {\n          return\n        }\n\n        const {\n          method = 'post',\n          url,\n          fields,\n          headers\n        } = responses[index]\n        const xhrOpts = {\n          method,\n          formData: method.toLowerCase() === 'post',\n          endpoint: url,\n          metaFields: Object.keys(fields)\n        }\n\n        if (headers) {\n          xhrOpts.headers = headers\n        }\n\n        const updatedFile = Object.assign({}, file, {\n          meta: Object.assign({}, file.meta, fields),\n          xhrUpload: xhrOpts\n        })\n\n        updatedFiles[id] = updatedFile\n      })\n\n      this.uppy.setState({\n        files: Object.assign({}, this.uppy.getState().files, updatedFiles)\n      })\n\n      fileIDs.forEach((id) => {\n        const file = this.uppy.getFile(id)\n        this.uppy.emit('preprocess-complete', file)\n      })\n    })\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.prepareUpload)\n\n    this.uppy.use(XHRUpload, {\n      fieldName: 'file',\n      responseUrlFieldName: 'location',\n      timeout: this.opts.timeout,\n      limit: this.opts.limit,\n      getResponseData (content, xhr) {\n        // If no response, we've hopefully done a PUT request to the file\n        // in the bucket on its full URL.\n        if (!isXml(xhr)) {\n          return { location: xhr.responseURL }\n        }\n\n        let getValue = () => ''\n        if (xhr.responseXML) {\n          getValue = (key) => {\n            const el = xhr.responseXML.querySelector(key)\n            return el ? el.textContent : ''\n          }\n        }\n\n        if (xhr.responseText) {\n          getValue = (key) => {\n            const start = xhr.responseText.indexOf(`<${key}>`)\n            const end = xhr.responseText.indexOf(`</${key}>`)\n            return start !== -1 && end !== -1\n              ? xhr.responseText.slice(start + key.length + 2, end)\n              : ''\n          }\n        }\n\n        return {\n          location: getValue('Location'),\n          bucket: getValue('Bucket'),\n          key: getValue('Key'),\n          etag: getValue('ETag')\n        }\n      },\n      getResponseError (content, xhr) {\n        // If no response, we don't have a specific error message, use the default.\n        if (!isXml(xhr)) {\n          return\n        }\n        const error = xhr.responseXML.querySelector('Error > Message')\n        return new Error(error.textContent)\n      }\n    })\n  }\n\n  uninstall () {\n    const uploader = this.uppy.getPlugin('XHRUpload')\n    this.uppy.removePlugin(uploader)\n\n    this.uppy.removePreProcessor(this.prepareUpload)\n  }\n}\n"]}