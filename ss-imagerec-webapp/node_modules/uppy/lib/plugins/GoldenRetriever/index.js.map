{"version":3,"sources":["../../../src/plugins/GoldenRetriever/index.js"],"names":["Plugin","require","ServiceWorkerStore","IndexedDBStore","MetaDataStore","module","exports","uppy","opts","type","id","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","loadFilesStateFromLocalStorage","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","onBlobsLoaded","savedState","load","log","setState","currentUploads","files","savedPluginData","pluginData","getWaitingFiles","waitingFiles","allFiles","state","Object","keys","forEach","fileID","file","getFile","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileIDs","filesToSave","emit","data","save","list","then","blobs","numberOfFilesRecovered","length","numberOfFilesTryingToRecover","info","catch","err","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isRestored","updatedFile","generatePreview","deleteBlobs","promises","delete","all","install","on","isRemote","put","successful","map","getState","uploadId","restore"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\nconst ServiceWorkerStore = require('./ServiceWorkerStore')\nconst IndexedDBStore = require('./IndexedDBStore')\nconst MetaDataStore = require('./MetaDataStore')\n\n/**\n* The GoldenRetriever plugin â€” restores selected files and resumes uploads\n* after a closed tab or a browser crash!\n*\n* Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n* https://uppy.io/blog/2017/07/golden-retriever/\n*/\nmodule.exports = class GoldenRetriever extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID()\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore(Object.assign(\n      { expires: this.opts.expires },\n      opts.indexedDB || {},\n      { storeName: uppy.getID() }))\n\n    this.saveFilesStateToLocalStorage = this.saveFilesStateToLocalStorage.bind(this)\n    this.loadFilesStateFromLocalStorage = this.loadFilesStateFromLocalStorage.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  loadFilesStateFromLocalStorage () {\n    const savedState = this.MetaDataStore.load()\n\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {}\n      })\n\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    const allFiles = this.uppy.state.files\n    Object.keys(allFiles).forEach((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[fileID] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.state\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = Object.assign(\n      this.getWaitingFiles(),\n      this.getUploadingFiles()\n    )\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    this.MetaDataStore.save({\n      currentUploads: this.uppy.state.currentUploads,\n      files: filesToSave,\n      pluginData: pluginData\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    this.ServiceWorkerStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n      const numberOfFilesTryingToRecover = Object.keys(this.uppy.state.files).length\n      if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return this.loadFileBlobsFromIndexedDB()\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        this.uppy.info(`Successfully recovered ${numberOfFilesRecovered} files`, 'success', 3000)\n        return this.onBlobsLoaded(blobs)\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = Object.assign({}, this.uppy.state.files)\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true\n      }\n      const updatedFile = Object.assign({}, originalFile, updatedFileData)\n      updatedFiles[fileID] = updatedFile\n\n      this.uppy.generatePreview(updatedFile)\n    })\n\n    this.uppy.setState({\n      files: updatedFiles\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    const promises = []\n    fileIDs.forEach((id) => {\n      if (this.ServiceWorkerStore) {\n        promises.push(this.ServiceWorkerStore.delete(id))\n      }\n      if (this.IndexedDBStore) {\n        promises.push(this.IndexedDBStore.delete(id))\n      }\n    })\n    return Promise.all(promises)\n  }\n\n  install () {\n    this.loadFilesStateFromLocalStorage()\n\n    if (Object.keys(this.uppy.state.files).length > 0) {\n      if (this.ServiceWorkerStore) {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Service Worker...')\n        this.loadFileBlobsFromServiceWorker()\n      } else {\n        this.uppy.log('[GoldenRetriever] Attempting to load files from Indexed DB...')\n        this.loadFileBlobsFromIndexedDB()\n      }\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n      this.onBlobsLoaded([])\n    }\n\n    this.uppy.on('file-added', (file) => {\n      if (file.isRemote) return\n\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.put(file).catch((err) => {\n          this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n          this.uppy.log(err)\n        })\n      }\n\n      this.IndexedDBStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('file-removed', (file) => {\n      if (this.ServiceWorkerStore) {\n        this.ServiceWorkerStore.delete(file.id).catch((err) => {\n          this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n          this.uppy.log(err)\n        })\n      }\n      this.IndexedDBStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('complete', ({ successful }) => {\n      const fileIDs = successful.map((file) => file.id)\n      this.deleteBlobs(fileIDs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n        this.uppy.log(err)\n      })\n    })\n\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n\n    this.uppy.on('restored', () => {\n      // start all uploads again when file blobs are restored\n      const { currentUploads } = this.uppy.getState()\n      if (currentUploads) {\n        Object.keys(currentUploads).forEach((uploadId) => {\n          this.uppy.restore(uploadId, currentUploads[uploadId])\n        })\n      }\n    })\n  }\n}\n"]}