{"version":3,"sources":["../../../src/plugins/GoldenRetriever/IndexedDBStore.js"],"names":["prettyBytes","require","indexedDB","window","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isSupported","DB_NAME","STORE_NAME","DEFAULT_EXPIRY","DB_VERSION","migrateExpiration","store","request","openCursor","onsuccess","event","cursor","target","result","entry","value","expires","Date","now","update","connect","dbName","open","resolve","reject","onupgradeneeded","db","transaction","currentTarget","oldVersion","createObjectStore","keyPath","createIndex","unique","objectStore","oncomplete","onerror","waitForRequest","cleanedUp","IndexedDBStore","opts","storeName","maxFileSize","maxTotalSize","name","createConnection","ready","cleanup","then","key","fileID","list","index","getAll","IDBKeyRange","only","files","forEach","file","data","get","id","getSize","size","continue","Error","put","add","delete","upperBound","console","log","close","module","exports"],"mappings":"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","file":"IndexedDBStore.js","sourcesContent":["const prettyBytes = require('prettier-bytes')\nconst indexedDB = typeof window !== 'undefined' &&\n  (window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB)\n\nconst isSupported = !!indexedDB\n\nconst DB_NAME = 'uppy-blobs'\nconst STORE_NAME = 'files' // maybe have a thumbnail store in the future\nconst DEFAULT_EXPIRY = 24 * 60 * 60 * 1000 // 24 hours\nconst DB_VERSION = 3\n\n// Set default `expires` dates on existing stored blobs.\nfunction migrateExpiration (store) {\n  const request = store.openCursor()\n  request.onsuccess = (event) => {\n    const cursor = event.target.result\n    if (!cursor) {\n      return\n    }\n    const entry = cursor.value\n    entry.expires = Date.now() + DEFAULT_EXPIRY\n    cursor.update(entry)\n  }\n}\n\nfunction connect (dbName) {\n  const request = indexedDB.open(dbName, DB_VERSION)\n  return new Promise((resolve, reject) => {\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result\n      const transaction = event.currentTarget.transaction\n\n      if (event.oldVersion < 2) {\n        // Added in v2: DB structure changed to a single shared object store\n        const store = db.createObjectStore(STORE_NAME, { keyPath: 'id' })\n        store.createIndex('store', 'store', { unique: false })\n      }\n\n      if (event.oldVersion < 3) {\n        // Added in v3\n        const store = transaction.objectStore(STORE_NAME)\n        store.createIndex('expires', 'expires', { unique: false })\n\n        migrateExpiration(store)\n      }\n\n      transaction.oncomplete = () => {\n        resolve(db)\n      }\n    }\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nfunction waitForRequest (request) {\n  return new Promise((resolve, reject) => {\n    request.onsuccess = (event) => {\n      resolve(event.target.result)\n    }\n    request.onerror = reject\n  })\n}\n\nlet cleanedUp = false\nclass IndexedDBStore {\n  constructor (opts) {\n    this.opts = Object.assign({\n      dbName: DB_NAME,\n      storeName: 'default',\n      expires: DEFAULT_EXPIRY, // 24 hours\n      maxFileSize: 10 * 1024 * 1024, // 10 MB\n      maxTotalSize: 300 * 1024 * 1024 // 300 MB\n    }, opts)\n\n    this.name = this.opts.storeName\n\n    const createConnection = () => {\n      return connect(this.opts.dbName)\n    }\n\n    if (!cleanedUp) {\n      cleanedUp = true\n      this.ready = IndexedDBStore.cleanup()\n        .then(createConnection, createConnection)\n    } else {\n      this.ready = createConnection()\n    }\n  }\n\n  key (fileID) {\n    return `${this.name}!${fileID}`\n  }\n\n  /**\n   * List all file blobs currently in the store.\n   */\n  list () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('store')\n        .getAll(IDBKeyRange.only(this.name))\n      return waitForRequest(request)\n    }).then((files) => {\n      const result = {}\n      files.forEach((file) => {\n        result[file.fileID] = file.data\n      })\n      return result\n    })\n  }\n\n  /**\n   * Get one file blob from the store.\n   */\n  get (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const request = transaction.objectStore(STORE_NAME)\n        .get(this.key(fileID))\n      return waitForRequest(request)\n    }).then((result) => ({\n      id: result.data.fileID,\n      data: result.data.data\n    }))\n  }\n\n  /**\n   * Get the total size of all stored files.\n   *\n   * @private\n   */\n  getSize () {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readonly')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('store')\n        .openCursor(IDBKeyRange.only(this.name))\n      return new Promise((resolve, reject) => {\n        let size = 0\n        request.onsuccess = (event) => {\n          const cursor = event.target.result\n          if (cursor) {\n            size += cursor.value.data.size\n            cursor.continue()\n          } else {\n            resolve(size)\n          }\n        }\n        request.onerror = () => {\n          reject(new Error('Could not retrieve stored blobs size'))\n        }\n      })\n    })\n  }\n\n  /**\n   * Save a file in the store.\n   */\n  put (file) {\n    if (file.data.size > this.opts.maxFileSize) {\n      return Promise.reject(new Error('File is too big to store.'))\n    }\n    return this.getSize().then((size) => {\n      if (size > this.opts.maxTotalSize) {\n        return Promise.reject(new Error('No space left'))\n      }\n      return this.ready\n    }).then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const request = transaction.objectStore(STORE_NAME).add({\n        id: this.key(file.id),\n        fileID: file.id,\n        store: this.name,\n        expires: Date.now() + this.opts.expires,\n        data: file.data\n      })\n      return waitForRequest(request)\n    })\n  }\n\n  /**\n   * Delete a file blob from the store.\n   */\n  delete (fileID) {\n    return this.ready.then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const request = transaction.objectStore(STORE_NAME)\n        .delete(this.key(fileID))\n      return waitForRequest(request)\n    })\n  }\n\n  /**\n   * Delete all stored blobs that have an expiry date that is before Date.now().\n   * This is a static method because it deletes expired blobs from _all_ Uppy instances.\n   */\n  static cleanup () {\n    return connect(DB_NAME).then((db) => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite')\n      const store = transaction.objectStore(STORE_NAME)\n      const request = store.index('expires')\n        .openCursor(IDBKeyRange.upperBound(Date.now()))\n      return new Promise((resolve, reject) => {\n        request.onsuccess = (event) => {\n          const cursor = event.target.result\n          if (cursor) {\n            const entry = cursor.value\n            console.log(\n              '[IndexedDBStore] Deleting record', entry.fileID,\n              'of size', prettyBytes(entry.data.size),\n              '- expired on', new Date(entry.expires))\n            cursor.delete() // Ignoring return value … it's not terrible if this goes wrong.\n            cursor.continue()\n          } else {\n            resolve(db)\n          }\n        }\n        request.onerror = reject\n      })\n    }).then((db) => {\n      db.close()\n    })\n  }\n}\n\nIndexedDBStore.isSupported = isSupported\n\nmodule.exports = IndexedDBStore\n"]}