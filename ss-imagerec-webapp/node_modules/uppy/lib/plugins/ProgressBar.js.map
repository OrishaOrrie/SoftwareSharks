{"version":3,"sources":["../../src/plugins/ProgressBar.js"],"names":["Plugin","require","h","module","exports","uppy","opts","id","title","type","defaultOptions","target","replaceTargetContent","fixed","hideAfterFinish","render","bind","state","progress","totalProgress","isHidden","position","width","install","mount","uninstall","unmount"],"mappings":";;;;;;;;AAAA,IAAMA,SAASC,QAAQ,gBAAR,CAAf;;eACcA,QAAQ,QAAR,C;IAANC,C,YAAAA,C;;AAER;;;;;;AAIAC,OAAOC,OAAP;AAAA;;AACE,uBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,mBAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,EAAL,GAAU,MAAKD,IAAL,CAAUC,EAAV,IAAgB,aAA1B;AACA,UAAKC,KAAL,GAAa,cAAb;AACA,UAAKC,IAAL,GAAY,mBAAZ;;AAEA;AACA,QAAMC,iBAAiB;AACrBC,cAAQ,MADa;AAErBC,4BAAsB,KAFD;AAGrBC,aAAO,KAHc;AAIrBC,uBAAiB;;AAGnB;AAPuB,KAAvB,CAQA,MAAKR,IAAL,GAAY,SAAc,EAAd,EAAkBI,cAAlB,EAAkCJ,IAAlC,CAAZ;;AAEA,UAAKS,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,OAAd;AAjBuB;AAkBxB;;AAnBH,wBAqBED,MArBF,mBAqBUE,KArBV,EAqBiB;AACb,QAAMC,WAAWD,MAAME,aAAN,IAAuB,CAAxC;AACA,QAAMC,WAAWF,aAAa,GAAb,IAAoB,KAAKZ,IAAL,CAAUQ,eAA/C;AACA,WAAO;AAAA;AAAA,QAAK,SAAM,uBAAX,EAAmC,OAAO,EAAEO,UAAU,KAAKf,IAAL,CAAUO,KAAV,GAAkB,OAAlB,GAA4B,SAAxC,EAA1C,EAA+F,eAAaO,QAA5G;AACL,iBAAK,SAAM,wBAAX,EAAoC,OAAO,EAAEE,OAAOJ,WAAW,GAApB,EAA3C,GADK;AAEL;AAAA;AAAA,UAAK,SAAM,6BAAX;AAA0CA;AAA1C;AAFK,KAAP;AAID,GA5BH;;AAAA,wBA8BEK,OA9BF,sBA8Ba;AACT,QAAMZ,SAAS,KAAKL,IAAL,CAAUK,MAAzB;AACA,QAAIA,MAAJ,EAAY;AACV,WAAKa,KAAL,CAAWb,MAAX,EAAmB,IAAnB;AACD;AACF,GAnCH;;AAAA,wBAqCEc,SArCF,wBAqCe;AACX,SAAKC,OAAL;AACD,GAvCH;;AAAA;AAAA,EAA2C1B,MAA3C","file":"ProgressBar.js","sourcesContent":["const Plugin = require('../core/Plugin')\nconst { h } = require('preact')\n\n/**\n * Progress bar\n *\n */\nmodule.exports = class ProgressBar extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'ProgressBar'\n    this.title = 'Progress Bar'\n    this.type = 'progressindicator'\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      replaceTargetContent: false,\n      fixed: false,\n      hideAfterFinish: true\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.render = this.render.bind(this)\n  }\n\n  render (state) {\n    const progress = state.totalProgress || 0\n    const isHidden = progress === 100 && this.opts.hideAfterFinish\n    return <div class=\"uppy uppy-ProgressBar\" style={{ position: this.opts.fixed ? 'fixed' : 'initial' }} aria-hidden={isHidden}>\n      <div class=\"uppy-ProgressBar-inner\" style={{ width: progress + '%' }} />\n      <div class=\"uppy-ProgressBar-percentage\">{progress}</div>\n    </div>\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}