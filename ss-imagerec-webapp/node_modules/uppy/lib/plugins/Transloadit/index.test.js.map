{"version":3,"sources":["../../../src/plugins/Transloadit/index.test.js"],"names":["Core","require","Transloadit","describe","it","uppy","expect","use","params","toThrowError","not","autoProceed","getAssemblyOptions","file","name","toBe","data","Buffer","alloc","size","byteLength","addFile","then","upload","Error","err","message","toMatch","auth","key","steps","fake_step","tl","getPlugin","files","i","client","createAssembly","opts","toEqual","reject","all","assemblies","assembly","data2","run","alwaysRunAssembly","rejects"],"mappings":"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","file":"index.test.js","sourcesContent":["const Core = require('../../core')\nconst Transloadit = require('./')\n\ndescribe('Transloadit', () => {\n  it('Throws errors if options are missing', () => {\n    const uppy = new Core()\n\n    expect(() => {\n      uppy.use(Transloadit, { params: {} })\n    }).toThrowError(/The `params\\.auth\\.key` option is required/)\n  })\n\n  it('Accepts a JSON string as `params` for signature authentication', () => {\n    const uppy = new Core()\n\n    expect(() => {\n      uppy.use(Transloadit, {\n        params: 'not json'\n      })\n    }).toThrowError(/The `params` option is a malformed JSON string/)\n\n    expect(() => {\n      uppy.use(Transloadit, {\n        params: '{\"template_id\":\"some template id string\"}'\n      })\n    }).toThrowError(/The `params\\.auth\\.key` option is required/)\n    expect(() => {\n      uppy.use(Transloadit, {\n        params: '{\"auth\":{\"key\":\"some auth key string\"},\"template_id\":\"some template id string\"}'\n      })\n    }).not.toThrowError(/The `params\\.auth\\.key` option is required/)\n  })\n\n  it('Validates response from getAssemblyOptions()', () => {\n    const uppy = new Core({ autoProceed: false })\n\n    uppy.use(Transloadit, {\n      getAssemblyOptions: (file) => {\n        expect(file.name).toBe('testfile')\n        return {\n          params: '{\"some\":\"json\"}'\n        }\n      }\n    })\n\n    const data = Buffer.alloc(4000)\n    data.size = data.byteLength\n    return uppy.addFile({\n      name: 'testfile',\n      data\n    }).then(() => {\n      return uppy.upload().then(() => {\n        throw new Error('should have rejected')\n      }, (err) => {\n        expect(err.message).toMatch(/The `params\\.auth\\.key` option is required/)\n      })\n    })\n  })\n\n  it('Uses different assemblies for different params', () => {\n    const uppy = new Core({ autoProceed: false })\n\n    uppy.use(Transloadit, {\n      getAssemblyOptions: (file) => ({\n        params: {\n          auth: { key: 'fake key' },\n          steps: {\n            fake_step: { data: file.name }\n          }\n        }\n      })\n    })\n\n    const tl = uppy.getPlugin('Transloadit')\n    const files = ['a.png', 'b.png', 'c.png', 'd.png']\n    let i = 0\n    tl.client.createAssembly = (opts) => {\n      expect(opts.params.steps.fake_step.data).toEqual(files[i])\n      i++\n      // Short-circuit upload\n      return Promise.reject('short-circuit') // eslint-disable-line prefer-promise-reject-errors\n    }\n\n    const data = Buffer.alloc(10)\n    data.size = data.byteLength\n\n    return Promise.all([\n      uppy.addFile({ name: 'a.png', data }),\n      uppy.addFile({ name: 'b.png', data }),\n      uppy.addFile({ name: 'c.png', data }),\n      uppy.addFile({ name: 'd.png', data })\n    ]).then(() => {\n      return uppy.upload().then(() => {\n        throw new Error('upload should have been rejected')\n      }, () => {\n        expect(i).toBe(4)\n      })\n    })\n  })\n\n  it('Should merge files with same parameters into one Assembly', () => {\n    const uppy = new Core({ autoProceed: false })\n\n    uppy.use(Transloadit, {\n      getAssemblyOptions: (file) => ({\n        params: {\n          auth: { key: 'fake key' },\n          steps: {\n            fake_step: { data: file.size }\n          }\n        }\n      })\n    })\n\n    const tl = uppy.getPlugin('Transloadit')\n    const assemblies = [\n      { data: 10, files: ['a.png', 'b.png', 'c.png'] },\n      { data: 20, files: ['d.png'] }\n    ]\n    let i = 0\n    tl.client.createAssembly = (opts) => {\n      const assembly = assemblies[i]\n      expect(opts.params.steps.fake_step.data).toBe(assembly.data)\n      i++\n      // Short-circuit upload\n      return Promise.reject('short-circuit') // eslint-disable-line prefer-promise-reject-errors\n    }\n\n    const data = Buffer.alloc(10)\n    data.size = data.byteLength\n    const data2 = Buffer.alloc(20)\n    data2.size = data2.byteLength\n\n    return Promise.all([\n      uppy.addFile({ name: 'a.png', data }),\n      uppy.addFile({ name: 'b.png', data }),\n      uppy.addFile({ name: 'c.png', data }),\n      uppy.addFile({ name: 'd.png', data: data2 })\n    ]).then(() => {\n      return uppy.upload().then(() => {\n        throw new Error('Upload should have been rejected')\n      }, () => {\n        expect(i).toBe(2)\n      })\n    })\n  })\n\n  it('Does not create an Assembly if no files are being uploaded', () => {\n    const uppy = new Core()\n    uppy.use(Transloadit, {\n      getAssemblyOptions () {\n        throw new Error('should not create Assembly')\n      }\n    })\n    uppy.run()\n\n    return uppy.upload()\n  })\n\n  it('Creates an Assembly if no files are being uploaded but `alwaysRunAssembly` is enabled', () => {\n    const uppy = new Core()\n    uppy.use(Transloadit, {\n      alwaysRunAssembly: true,\n      getAssemblyOptions (file) {\n        // should call getAssemblyOptions with `null`\n        expect(file).toBe(null)\n        return Promise.reject('short-circuited') // eslint-disable-line prefer-promise-reject-errors\n      }\n    })\n\n    return expect(uppy.upload()).rejects.toEqual(new Error('short-circuited'))\n  })\n})\n"]}